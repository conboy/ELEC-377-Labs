Code Documentation

File Name: selfcomp.c

Objectives: This file attacks itself with the global buffer overflow attack to develop the exploit for use on a server.

Code Description: x characters were added repeatedly in the compromise1 string to cause a buffer overflow. gdb was then used to find the stack
pointer. Then an array called compromise was made using the hexadecimal machine code created from the exploit.nasm file. 5 NOP bytes were added 
to fill up the array and catch the process returning to the injected program.
							
							
File Name: exploit.nasm/exploit.lst

Objectives:	x86 code used to exploit the global buffer and call the command sh -c "printenv;exit"

Code Description: The start of the data segment is found by jumping to the end of the code then going back to the start to pop the data segment
address recorded on the stack. Then the code was modified so that some lines of code have null bytes in them so they can go through the server.
The code then moves the data into the argv array so that the computer can be tricked into executing them. This is done with relative addressing
so that the program can be run on runtime. Finally, the key registers are set up to execute the command as well as the system call to execute the
commands in argv. 
		
        						
File Name: client.c

Objectives:	Connect to the server and cause a buffer overflow with the exploit that reveals the environment variables.

Code Description: The same principle from selfcomp.c was used in this application. There were 69 NOPs and 208 x's before the MNOPWXYZ. After
connecting to the server with the client the server spills the environment variables where the md5 hash was found.
c13d47bfb60f61fb5f0c9e4aaca3d244

CRACKING THE PASSWORD

The cracked pass word is "Burritos24: from c13d47bfb60f61fb5f0c9e4aaca3d244

Words and numbers that Jack Teller used on his social media were compiled into two files guess_nums.txt and guess_words.txt. These files were
then sent through a bash script called msd5guesser.sh that combines a random word and a number and then it generates the md5 hash from that.
I ran the code ./msd5guesser.sh guess_words.txt guess_nums.txt > msdguesses.txt I then used ctrl-f on the hash I got from the server to find his
password.